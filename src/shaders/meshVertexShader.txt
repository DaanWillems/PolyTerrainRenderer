#version 330

layout (location=0) in vec3 position;
layout (location=1) in vec3 normal;
layout (location=2) in vec2 textureCoords;

out vec4 pass_colour;
out vec2 outTexCoord;

uniform mat4 projectionMatrix;
uniform mat4 worldMatrix;
uniform mat4 viewMatrix;
uniform vec4 diffuseColour;

vec3 lightDirection = vec3(-0.5, -0.2, 1.0);
vec3 lightColour = vec3(1, 1, 1);
vec2 lightBias = vec2(0.7, 0.45);

uniform vec4 plane;

vec3 calculateLighting(){
	vec3 normal = normal.xyz * 2.0 - 1.0;//required just because of the format the normals were stored in (0 - 1)
	float brightness = max(dot(-lightDirection, normal), 0.0);
	return (lightColour * lightBias.x) + (brightness * lightColour * lightBias.y);
}

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main()
{
	float r = rand(vec2(position.x, position.y));
	gl_Position = projectionMatrix * viewMatrix * worldMatrix * vec4(position, 1.0);
	vec3 lighting = calculateLighting();
	pass_colour = diffuseColour * vec4(lighting, 1.0);
	
	outTexCoord = textureCoords;
}